diff --git a/modules/cache.py b/modules/cache.py
index 71fe6302..eded3461 100644
--- a/modules/cache.py
+++ b/modules/cache.py
@@ -97,24 +97,28 @@ def cached_data_for_file(subsection, title, filename, func):
     If the data generation fails, None is returned to indicate the failure. Otherwise, the generated
     or cached data is returned as a dictionary.
     """
+    try:
+      existing_cache = cache(subsection)
+      ondisk_mtime = os.path.getmtime(filename)
 
-    existing_cache = cache(subsection)
-    ondisk_mtime = os.path.getmtime(filename)
+      entry = existing_cache.get(title)
+      if entry:
+          cached_mtime = entry.get("mtime", 0)
+          if ondisk_mtime > cached_mtime:
+              entry = None
 
-    entry = existing_cache.get(title)
-    if entry:
-        cached_mtime = entry.get("mtime", 0)
-        if ondisk_mtime > cached_mtime:
-            entry = None
+      if not entry or 'value' not in entry:
+          value = func()
+          if value is None:
+              return None
 
-    if not entry or 'value' not in entry:
-        value = func()
-        if value is None:
-            return None
+          entry = {'mtime': ondisk_mtime, 'value': value}
+          existing_cache[title] = entry
 
-        entry = {'mtime': ondisk_mtime, 'value': value}
-        existing_cache[title] = entry
+          dump_cache()
+    except:
+      # Let's say "screw ya, IDGAF!!!!!!!!!!!!"
+      return None
 
-        dump_cache()
 
     return entry['value']
diff --git a/modules/extensions.py b/modules/extensions.py
index c561159a..a1426f2f 100644
--- a/modules/extensions.py
+++ b/modules/extensions.py
@@ -41,8 +41,11 @@ class Extension:
         return {x: getattr(self, x) for x in self.cached_fields}
 
     def from_dict(self, d):
+      try:
         for field in self.cached_fields:
             setattr(self, field, d[field])
+      except:
+        pass
 
     def read_info_from_repo(self):
         if self.is_builtin or self.have_info_from_repo:
